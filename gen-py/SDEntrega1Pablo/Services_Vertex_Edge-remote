#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from SDEntrega1Pablo import Services_Vertex_Edge
from SDEntrega1Pablo.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void load_file()')
    print('  void save_file()')
    print('  void createVert(int name, int color, string description, double weight)')
    print('  Vertex readVert(int name)')
    print('  Vertex updateVert(int name, int color, string description, double weight)')
    print('  void deletaVert(int name)')
    print('   listNeighbours(int name)')
    print('   listVertexesFromEdge(int name)')
    print('   listEdgesFromVertex(int name)')
    print('  Edge createEdge(int id, int origem_vertex, int destination_vertex, double weight, bool Unidirectional, string description)')
    print('  Edge readEdge(int id)')
    print('  Edge updateEdge(int id, int origem_vertex, int destination_vertex, double weight, bool Unidirectional, string description)')
    print('  void deletaEdge(int id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Services_Vertex_Edge.Client(protocol)
transport.open()

if cmd == 'load_file':
    if len(args) != 0:
        print('load_file requires 0 args')
        sys.exit(1)
    pp.pprint(client.load_file())

elif cmd == 'save_file':
    if len(args) != 0:
        print('save_file requires 0 args')
        sys.exit(1)
    pp.pprint(client.save_file())

elif cmd == 'createVert':
    if len(args) != 4:
        print('createVert requires 4 args')
        sys.exit(1)
    pp.pprint(client.createVert(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'readVert':
    if len(args) != 1:
        print('readVert requires 1 args')
        sys.exit(1)
    pp.pprint(client.readVert(eval(args[0]),))

elif cmd == 'updateVert':
    if len(args) != 4:
        print('updateVert requires 4 args')
        sys.exit(1)
    pp.pprint(client.updateVert(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'deletaVert':
    if len(args) != 1:
        print('deletaVert requires 1 args')
        sys.exit(1)
    pp.pprint(client.deletaVert(eval(args[0]),))

elif cmd == 'listNeighbours':
    if len(args) != 1:
        print('listNeighbours requires 1 args')
        sys.exit(1)
    pp.pprint(client.listNeighbours(eval(args[0]),))

elif cmd == 'listVertexesFromEdge':
    if len(args) != 1:
        print('listVertexesFromEdge requires 1 args')
        sys.exit(1)
    pp.pprint(client.listVertexesFromEdge(eval(args[0]),))

elif cmd == 'listEdgesFromVertex':
    if len(args) != 1:
        print('listEdgesFromVertex requires 1 args')
        sys.exit(1)
    pp.pprint(client.listEdgesFromVertex(eval(args[0]),))

elif cmd == 'createEdge':
    if len(args) != 6:
        print('createEdge requires 6 args')
        sys.exit(1)
    pp.pprint(client.createEdge(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5],))

elif cmd == 'readEdge':
    if len(args) != 1:
        print('readEdge requires 1 args')
        sys.exit(1)
    pp.pprint(client.readEdge(eval(args[0]),))

elif cmd == 'updateEdge':
    if len(args) != 6:
        print('updateEdge requires 6 args')
        sys.exit(1)
    pp.pprint(client.updateEdge(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5],))

elif cmd == 'deletaEdge':
    if len(args) != 1:
        print('deletaEdge requires 1 args')
        sys.exit(1)
    pp.pprint(client.deletaEdge(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
