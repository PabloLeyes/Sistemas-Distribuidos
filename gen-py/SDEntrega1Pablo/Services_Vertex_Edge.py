#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def load_file(self):
        pass

    def save_file(self):
        pass

    def createVert(self, name, color, description, weight):
        """
        Parameters:
         - name
         - color
         - description
         - weight
        """
        pass

    def readVert(self, name):
        """
        Parameters:
         - name
        """
        pass

    def updateVert(self, name, color, description, weight):
        """
        Parameters:
         - name
         - color
         - description
         - weight
        """
        pass

    def deletaVert(self, name):
        """
        Parameters:
         - name
        """
        pass

    def listNeighbours(self, name):
        """
        Parameters:
         - name
        """
        pass

    def listVertexesFromEdge(self, name):
        """
        Parameters:
         - name
        """
        pass

    def listEdgesFromVertex(self, name):
        """
        Parameters:
         - name
        """
        pass

    def createEdge(self, id, origem_vertex, destination_vertex, weight, Unidirectional, description):
        """
        Parameters:
         - id
         - origem_vertex
         - destination_vertex
         - weight
         - Unidirectional
         - description
        """
        pass

    def readEdge(self, id):
        """
        Parameters:
         - id
        """
        pass

    def updateEdge(self, id, origem_vertex, destination_vertex, weight, Unidirectional, description):
        """
        Parameters:
         - id
         - origem_vertex
         - destination_vertex
         - weight
         - Unidirectional
         - description
        """
        pass

    def deletaEdge(self, id):
        """
        Parameters:
         - id
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def load_file(self):
        self.send_load_file()
        self.recv_load_file()

    def send_load_file(self):
        self._oprot.writeMessageBegin('load_file', TMessageType.CALL, self._seqid)
        args = load_file_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_load_file(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = load_file_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def save_file(self):
        self.send_save_file()
        self.recv_save_file()

    def send_save_file(self):
        self._oprot.writeMessageBegin('save_file', TMessageType.CALL, self._seqid)
        args = save_file_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_save_file(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = save_file_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def createVert(self, name, color, description, weight):
        """
        Parameters:
         - name
         - color
         - description
         - weight
        """
        self.send_createVert(name, color, description, weight)
        self.recv_createVert()

    def send_createVert(self, name, color, description, weight):
        self._oprot.writeMessageBegin('createVert', TMessageType.CALL, self._seqid)
        args = createVert_args()
        args.name = name
        args.color = color
        args.description = description
        args.weight = weight
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createVert(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createVert_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.invalidObject is not None:
            raise result.invalidObject
        return

    def readVert(self, name):
        """
        Parameters:
         - name
        """
        self.send_readVert(name)
        return self.recv_readVert()

    def send_readVert(self, name):
        self._oprot.writeMessageBegin('readVert', TMessageType.CALL, self._seqid)
        args = readVert_args()
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_readVert(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = readVert_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.objectNotFound is not None:
            raise result.objectNotFound
        raise TApplicationException(TApplicationException.MISSING_RESULT, "readVert failed: unknown result")

    def updateVert(self, name, color, description, weight):
        """
        Parameters:
         - name
         - color
         - description
         - weight
        """
        self.send_updateVert(name, color, description, weight)
        return self.recv_updateVert()

    def send_updateVert(self, name, color, description, weight):
        self._oprot.writeMessageBegin('updateVert', TMessageType.CALL, self._seqid)
        args = updateVert_args()
        args.name = name
        args.color = color
        args.description = description
        args.weight = weight
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateVert(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateVert_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.objectNotFound is not None:
            raise result.objectNotFound
        if result.invalidObject is not None:
            raise result.invalidObject
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateVert failed: unknown result")

    def deletaVert(self, name):
        """
        Parameters:
         - name
        """
        self.send_deletaVert(name)
        self.recv_deletaVert()

    def send_deletaVert(self, name):
        self._oprot.writeMessageBegin('deletaVert', TMessageType.CALL, self._seqid)
        args = deletaVert_args()
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deletaVert(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deletaVert_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.objectNotFound is not None:
            raise result.objectNotFound
        if result.invalidObject is not None:
            raise result.invalidObject
        return

    def listNeighbours(self, name):
        """
        Parameters:
         - name
        """
        self.send_listNeighbours(name)
        return self.recv_listNeighbours()

    def send_listNeighbours(self, name):
        self._oprot.writeMessageBegin('listNeighbours', TMessageType.CALL, self._seqid)
        args = listNeighbours_args()
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_listNeighbours(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = listNeighbours_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.invalidObject is not None:
            raise result.invalidObject
        raise TApplicationException(TApplicationException.MISSING_RESULT, "listNeighbours failed: unknown result")

    def listVertexesFromEdge(self, name):
        """
        Parameters:
         - name
        """
        self.send_listVertexesFromEdge(name)
        return self.recv_listVertexesFromEdge()

    def send_listVertexesFromEdge(self, name):
        self._oprot.writeMessageBegin('listVertexesFromEdge', TMessageType.CALL, self._seqid)
        args = listVertexesFromEdge_args()
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_listVertexesFromEdge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = listVertexesFromEdge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.objectNotFound is not None:
            raise result.objectNotFound
        raise TApplicationException(TApplicationException.MISSING_RESULT, "listVertexesFromEdge failed: unknown result")

    def listEdgesFromVertex(self, name):
        """
        Parameters:
         - name
        """
        self.send_listEdgesFromVertex(name)
        return self.recv_listEdgesFromVertex()

    def send_listEdgesFromVertex(self, name):
        self._oprot.writeMessageBegin('listEdgesFromVertex', TMessageType.CALL, self._seqid)
        args = listEdgesFromVertex_args()
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_listEdgesFromVertex(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = listEdgesFromVertex_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.objectNotFound is not None:
            raise result.objectNotFound
        raise TApplicationException(TApplicationException.MISSING_RESULT, "listEdgesFromVertex failed: unknown result")

    def createEdge(self, id, origem_vertex, destination_vertex, weight, Unidirectional, description):
        """
        Parameters:
         - id
         - origem_vertex
         - destination_vertex
         - weight
         - Unidirectional
         - description
        """
        self.send_createEdge(id, origem_vertex, destination_vertex, weight, Unidirectional, description)
        return self.recv_createEdge()

    def send_createEdge(self, id, origem_vertex, destination_vertex, weight, Unidirectional, description):
        self._oprot.writeMessageBegin('createEdge', TMessageType.CALL, self._seqid)
        args = createEdge_args()
        args.id = id
        args.origem_vertex = origem_vertex
        args.destination_vertex = destination_vertex
        args.weight = weight
        args.Unidirectional = Unidirectional
        args.description = description
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createEdge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createEdge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.invalidObject is not None:
            raise result.invalidObject
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createEdge failed: unknown result")

    def readEdge(self, id):
        """
        Parameters:
         - id
        """
        self.send_readEdge(id)
        return self.recv_readEdge()

    def send_readEdge(self, id):
        self._oprot.writeMessageBegin('readEdge', TMessageType.CALL, self._seqid)
        args = readEdge_args()
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_readEdge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = readEdge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.objectNotFound is not None:
            raise result.objectNotFound
        raise TApplicationException(TApplicationException.MISSING_RESULT, "readEdge failed: unknown result")

    def updateEdge(self, id, origem_vertex, destination_vertex, weight, Unidirectional, description):
        """
        Parameters:
         - id
         - origem_vertex
         - destination_vertex
         - weight
         - Unidirectional
         - description
        """
        self.send_updateEdge(id, origem_vertex, destination_vertex, weight, Unidirectional, description)
        return self.recv_updateEdge()

    def send_updateEdge(self, id, origem_vertex, destination_vertex, weight, Unidirectional, description):
        self._oprot.writeMessageBegin('updateEdge', TMessageType.CALL, self._seqid)
        args = updateEdge_args()
        args.id = id
        args.origem_vertex = origem_vertex
        args.destination_vertex = destination_vertex
        args.weight = weight
        args.Unidirectional = Unidirectional
        args.description = description
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateEdge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateEdge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.objectNotFound is not None:
            raise result.objectNotFound
        if result.invalidObject is not None:
            raise result.invalidObject
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateEdge failed: unknown result")

    def deletaEdge(self, id):
        """
        Parameters:
         - id
        """
        self.send_deletaEdge(id)
        self.recv_deletaEdge()

    def send_deletaEdge(self, id):
        self._oprot.writeMessageBegin('deletaEdge', TMessageType.CALL, self._seqid)
        args = deletaEdge_args()
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deletaEdge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deletaEdge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.operationFailed is not None:
            raise result.operationFailed
        if result.objectNotFound is not None:
            raise result.objectNotFound
        if result.invalidObject is not None:
            raise result.invalidObject
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["load_file"] = Processor.process_load_file
        self._processMap["save_file"] = Processor.process_save_file
        self._processMap["createVert"] = Processor.process_createVert
        self._processMap["readVert"] = Processor.process_readVert
        self._processMap["updateVert"] = Processor.process_updateVert
        self._processMap["deletaVert"] = Processor.process_deletaVert
        self._processMap["listNeighbours"] = Processor.process_listNeighbours
        self._processMap["listVertexesFromEdge"] = Processor.process_listVertexesFromEdge
        self._processMap["listEdgesFromVertex"] = Processor.process_listEdgesFromVertex
        self._processMap["createEdge"] = Processor.process_createEdge
        self._processMap["readEdge"] = Processor.process_readEdge
        self._processMap["updateEdge"] = Processor.process_updateEdge
        self._processMap["deletaEdge"] = Processor.process_deletaEdge

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_load_file(self, seqid, iprot, oprot):
        args = load_file_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = load_file_result()
        try:
            self._handler.load_file()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("load_file", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_save_file(self, seqid, iprot, oprot):
        args = save_file_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = save_file_result()
        try:
            self._handler.save_file()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("save_file", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createVert(self, seqid, iprot, oprot):
        args = createVert_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createVert_result()
        try:
            self._handler.createVert(args.name, args.color, args.description, args.weight)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except InvalidObject as invalidObject:
            msg_type = TMessageType.REPLY
            result.invalidObject = invalidObject
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createVert", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_readVert(self, seqid, iprot, oprot):
        args = readVert_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = readVert_result()
        try:
            result.success = self._handler.readVert(args.name)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except ObjectNotFound as objectNotFound:
            msg_type = TMessageType.REPLY
            result.objectNotFound = objectNotFound
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("readVert", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateVert(self, seqid, iprot, oprot):
        args = updateVert_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateVert_result()
        try:
            result.success = self._handler.updateVert(args.name, args.color, args.description, args.weight)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except ObjectNotFound as objectNotFound:
            msg_type = TMessageType.REPLY
            result.objectNotFound = objectNotFound
        except InvalidObject as invalidObject:
            msg_type = TMessageType.REPLY
            result.invalidObject = invalidObject
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateVert", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deletaVert(self, seqid, iprot, oprot):
        args = deletaVert_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deletaVert_result()
        try:
            self._handler.deletaVert(args.name)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except ObjectNotFound as objectNotFound:
            msg_type = TMessageType.REPLY
            result.objectNotFound = objectNotFound
        except InvalidObject as invalidObject:
            msg_type = TMessageType.REPLY
            result.invalidObject = invalidObject
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deletaVert", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_listNeighbours(self, seqid, iprot, oprot):
        args = listNeighbours_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = listNeighbours_result()
        try:
            result.success = self._handler.listNeighbours(args.name)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except InvalidObject as invalidObject:
            msg_type = TMessageType.REPLY
            result.invalidObject = invalidObject
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("listNeighbours", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_listVertexesFromEdge(self, seqid, iprot, oprot):
        args = listVertexesFromEdge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = listVertexesFromEdge_result()
        try:
            result.success = self._handler.listVertexesFromEdge(args.name)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except ObjectNotFound as objectNotFound:
            msg_type = TMessageType.REPLY
            result.objectNotFound = objectNotFound
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("listVertexesFromEdge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_listEdgesFromVertex(self, seqid, iprot, oprot):
        args = listEdgesFromVertex_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = listEdgesFromVertex_result()
        try:
            result.success = self._handler.listEdgesFromVertex(args.name)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except ObjectNotFound as objectNotFound:
            msg_type = TMessageType.REPLY
            result.objectNotFound = objectNotFound
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("listEdgesFromVertex", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createEdge(self, seqid, iprot, oprot):
        args = createEdge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createEdge_result()
        try:
            result.success = self._handler.createEdge(args.id, args.origem_vertex, args.destination_vertex, args.weight, args.Unidirectional, args.description)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except InvalidObject as invalidObject:
            msg_type = TMessageType.REPLY
            result.invalidObject = invalidObject
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createEdge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_readEdge(self, seqid, iprot, oprot):
        args = readEdge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = readEdge_result()
        try:
            result.success = self._handler.readEdge(args.id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except ObjectNotFound as objectNotFound:
            msg_type = TMessageType.REPLY
            result.objectNotFound = objectNotFound
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("readEdge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateEdge(self, seqid, iprot, oprot):
        args = updateEdge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateEdge_result()
        try:
            result.success = self._handler.updateEdge(args.id, args.origem_vertex, args.destination_vertex, args.weight, args.Unidirectional, args.description)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except ObjectNotFound as objectNotFound:
            msg_type = TMessageType.REPLY
            result.objectNotFound = objectNotFound
        except InvalidObject as invalidObject:
            msg_type = TMessageType.REPLY
            result.invalidObject = invalidObject
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateEdge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deletaEdge(self, seqid, iprot, oprot):
        args = deletaEdge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deletaEdge_result()
        try:
            self._handler.deletaEdge(args.id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except OperationFailed as operationFailed:
            msg_type = TMessageType.REPLY
            result.operationFailed = operationFailed
        except ObjectNotFound as objectNotFound:
            msg_type = TMessageType.REPLY
            result.objectNotFound = objectNotFound
        except InvalidObject as invalidObject:
            msg_type = TMessageType.REPLY
            result.invalidObject = invalidObject
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deletaEdge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class load_file_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('load_file_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class load_file_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('load_file_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class save_file_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('save_file_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class save_file_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('save_file_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createVert_args(object):
    """
    Attributes:
     - name
     - color
     - description
     - weight
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'name', None, None, ),  # 1
        (2, TType.I32, 'color', None, None, ),  # 2
        (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
        (4, TType.DOUBLE, 'weight', None, None, ),  # 4
    )

    def __init__(self, name=None, color=None, description=None, weight=None,):
        self.name = name
        self.color = color
        self.description = description
        self.weight = weight

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.color = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createVert_args')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.I32, 1)
            oprot.writeI32(self.name)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.I32, 2)
            oprot.writeI32(self.color)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 4)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createVert_result(object):
    """
    Attributes:
     - operationFailed
     - invalidObject
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'invalidObject', (InvalidObject, InvalidObject.thrift_spec), None, ),  # 2
    )

    def __init__(self, operationFailed=None, invalidObject=None,):
        self.operationFailed = operationFailed
        self.invalidObject = invalidObject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.invalidObject = InvalidObject()
                    self.invalidObject.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createVert_result')
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.invalidObject is not None:
            oprot.writeFieldBegin('invalidObject', TType.STRUCT, 2)
            self.invalidObject.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class readVert_args(object):
    """
    Attributes:
     - name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'name', None, None, ),  # 1
    )

    def __init__(self, name=None,):
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('readVert_args')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.I32, 1)
            oprot.writeI32(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class readVert_result(object):
    """
    Attributes:
     - success
     - operationFailed
     - objectNotFound
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (Vertex, Vertex.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'objectNotFound', (ObjectNotFound, ObjectNotFound.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, operationFailed=None, objectNotFound=None,):
        self.success = success
        self.operationFailed = operationFailed
        self.objectNotFound = objectNotFound

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Vertex()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectNotFound = ObjectNotFound()
                    self.objectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('readVert_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.objectNotFound is not None:
            oprot.writeFieldBegin('objectNotFound', TType.STRUCT, 2)
            self.objectNotFound.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateVert_args(object):
    """
    Attributes:
     - name
     - color
     - description
     - weight
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'name', None, None, ),  # 1
        (2, TType.I32, 'color', None, None, ),  # 2
        (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
        (4, TType.DOUBLE, 'weight', None, None, ),  # 4
    )

    def __init__(self, name=None, color=None, description=None, weight=None,):
        self.name = name
        self.color = color
        self.description = description
        self.weight = weight

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.color = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateVert_args')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.I32, 1)
            oprot.writeI32(self.name)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.I32, 2)
            oprot.writeI32(self.color)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 4)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateVert_result(object):
    """
    Attributes:
     - success
     - operationFailed
     - objectNotFound
     - invalidObject
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (Vertex, Vertex.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'objectNotFound', (ObjectNotFound, ObjectNotFound.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'invalidObject', (InvalidObject, InvalidObject.thrift_spec), None, ),  # 3
    )

    def __init__(self, success=None, operationFailed=None, objectNotFound=None, invalidObject=None,):
        self.success = success
        self.operationFailed = operationFailed
        self.objectNotFound = objectNotFound
        self.invalidObject = invalidObject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Vertex()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectNotFound = ObjectNotFound()
                    self.objectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.invalidObject = InvalidObject()
                    self.invalidObject.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateVert_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.objectNotFound is not None:
            oprot.writeFieldBegin('objectNotFound', TType.STRUCT, 2)
            self.objectNotFound.write(oprot)
            oprot.writeFieldEnd()
        if self.invalidObject is not None:
            oprot.writeFieldBegin('invalidObject', TType.STRUCT, 3)
            self.invalidObject.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deletaVert_args(object):
    """
    Attributes:
     - name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'name', None, None, ),  # 1
    )

    def __init__(self, name=None,):
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deletaVert_args')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.I32, 1)
            oprot.writeI32(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deletaVert_result(object):
    """
    Attributes:
     - operationFailed
     - objectNotFound
     - invalidObject
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'objectNotFound', (ObjectNotFound, ObjectNotFound.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'invalidObject', (InvalidObject, InvalidObject.thrift_spec), None, ),  # 3
    )

    def __init__(self, operationFailed=None, objectNotFound=None, invalidObject=None,):
        self.operationFailed = operationFailed
        self.objectNotFound = objectNotFound
        self.invalidObject = invalidObject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectNotFound = ObjectNotFound()
                    self.objectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.invalidObject = InvalidObject()
                    self.invalidObject.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deletaVert_result')
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.objectNotFound is not None:
            oprot.writeFieldBegin('objectNotFound', TType.STRUCT, 2)
            self.objectNotFound.write(oprot)
            oprot.writeFieldEnd()
        if self.invalidObject is not None:
            oprot.writeFieldBegin('invalidObject', TType.STRUCT, 3)
            self.invalidObject.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listNeighbours_args(object):
    """
    Attributes:
     - name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'name', None, None, ),  # 1
    )

    def __init__(self, name=None,):
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listNeighbours_args')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.I32, 1)
            oprot.writeI32(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listNeighbours_result(object):
    """
    Attributes:
     - success
     - operationFailed
     - invalidObject
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'invalidObject', (InvalidObject, InvalidObject.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, operationFailed=None, invalidObject=None,):
        self.success = success
        self.operationFailed = operationFailed
        self.invalidObject = invalidObject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.invalidObject = InvalidObject()
                    self.invalidObject.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listNeighbours_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter6 in self.success:
                oprot.writeI32(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.invalidObject is not None:
            oprot.writeFieldBegin('invalidObject', TType.STRUCT, 2)
            self.invalidObject.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listVertexesFromEdge_args(object):
    """
    Attributes:
     - name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'name', None, None, ),  # 1
    )

    def __init__(self, name=None,):
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listVertexesFromEdge_args')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.I32, 1)
            oprot.writeI32(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listVertexesFromEdge_result(object):
    """
    Attributes:
     - success
     - operationFailed
     - objectNotFound
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (Vertex, Vertex.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'objectNotFound', (ObjectNotFound, ObjectNotFound.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, operationFailed=None, objectNotFound=None,):
        self.success = success
        self.operationFailed = operationFailed
        self.objectNotFound = objectNotFound

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Vertex()
                        _elem12.read(iprot)
                        self.success.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectNotFound = ObjectNotFound()
                    self.objectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listVertexesFromEdge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter13 in self.success:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.objectNotFound is not None:
            oprot.writeFieldBegin('objectNotFound', TType.STRUCT, 2)
            self.objectNotFound.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listEdgesFromVertex_args(object):
    """
    Attributes:
     - name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'name', None, None, ),  # 1
    )

    def __init__(self, name=None,):
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listEdgesFromVertex_args')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.I32, 1)
            oprot.writeI32(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listEdgesFromVertex_result(object):
    """
    Attributes:
     - success
     - operationFailed
     - objectNotFound
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (Edge, Edge.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'objectNotFound', (ObjectNotFound, ObjectNotFound.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, operationFailed=None, objectNotFound=None,):
        self.success = success
        self.operationFailed = operationFailed
        self.objectNotFound = objectNotFound

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Edge()
                        _elem19.read(iprot)
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectNotFound = ObjectNotFound()
                    self.objectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listEdgesFromVertex_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter20 in self.success:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.objectNotFound is not None:
            oprot.writeFieldBegin('objectNotFound', TType.STRUCT, 2)
            self.objectNotFound.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createEdge_args(object):
    """
    Attributes:
     - id
     - origem_vertex
     - destination_vertex
     - weight
     - Unidirectional
     - description
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'origem_vertex', None, None, ),  # 2
        (3, TType.I32, 'destination_vertex', None, None, ),  # 3
        (4, TType.DOUBLE, 'weight', None, None, ),  # 4
        (5, TType.BOOL, 'Unidirectional', None, None, ),  # 5
        (6, TType.STRING, 'description', 'UTF8', None, ),  # 6
    )

    def __init__(self, id=None, origem_vertex=None, destination_vertex=None, weight=None, Unidirectional=None, description=None,):
        self.id = id
        self.origem_vertex = origem_vertex
        self.destination_vertex = destination_vertex
        self.weight = weight
        self.Unidirectional = Unidirectional
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.origem_vertex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.destination_vertex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.Unidirectional = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createEdge_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.origem_vertex is not None:
            oprot.writeFieldBegin('origem_vertex', TType.I32, 2)
            oprot.writeI32(self.origem_vertex)
            oprot.writeFieldEnd()
        if self.destination_vertex is not None:
            oprot.writeFieldBegin('destination_vertex', TType.I32, 3)
            oprot.writeI32(self.destination_vertex)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 4)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        if self.Unidirectional is not None:
            oprot.writeFieldBegin('Unidirectional', TType.BOOL, 5)
            oprot.writeBool(self.Unidirectional)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 6)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createEdge_result(object):
    """
    Attributes:
     - success
     - operationFailed
     - invalidObject
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (Edge, Edge.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'invalidObject', (InvalidObject, InvalidObject.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, operationFailed=None, invalidObject=None,):
        self.success = success
        self.operationFailed = operationFailed
        self.invalidObject = invalidObject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Edge()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.invalidObject = InvalidObject()
                    self.invalidObject.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createEdge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.invalidObject is not None:
            oprot.writeFieldBegin('invalidObject', TType.STRUCT, 2)
            self.invalidObject.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class readEdge_args(object):
    """
    Attributes:
     - id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
    )

    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('readEdge_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class readEdge_result(object):
    """
    Attributes:
     - success
     - operationFailed
     - objectNotFound
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (Edge, Edge.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'objectNotFound', (ObjectNotFound, ObjectNotFound.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, operationFailed=None, objectNotFound=None,):
        self.success = success
        self.operationFailed = operationFailed
        self.objectNotFound = objectNotFound

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Edge()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectNotFound = ObjectNotFound()
                    self.objectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('readEdge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.objectNotFound is not None:
            oprot.writeFieldBegin('objectNotFound', TType.STRUCT, 2)
            self.objectNotFound.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateEdge_args(object):
    """
    Attributes:
     - id
     - origem_vertex
     - destination_vertex
     - weight
     - Unidirectional
     - description
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'origem_vertex', None, None, ),  # 2
        (3, TType.I32, 'destination_vertex', None, None, ),  # 3
        (4, TType.DOUBLE, 'weight', None, None, ),  # 4
        (5, TType.BOOL, 'Unidirectional', None, None, ),  # 5
        (6, TType.STRING, 'description', 'UTF8', None, ),  # 6
    )

    def __init__(self, id=None, origem_vertex=None, destination_vertex=None, weight=None, Unidirectional=None, description=None,):
        self.id = id
        self.origem_vertex = origem_vertex
        self.destination_vertex = destination_vertex
        self.weight = weight
        self.Unidirectional = Unidirectional
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.origem_vertex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.destination_vertex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.Unidirectional = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateEdge_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.origem_vertex is not None:
            oprot.writeFieldBegin('origem_vertex', TType.I32, 2)
            oprot.writeI32(self.origem_vertex)
            oprot.writeFieldEnd()
        if self.destination_vertex is not None:
            oprot.writeFieldBegin('destination_vertex', TType.I32, 3)
            oprot.writeI32(self.destination_vertex)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 4)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        if self.Unidirectional is not None:
            oprot.writeFieldBegin('Unidirectional', TType.BOOL, 5)
            oprot.writeBool(self.Unidirectional)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 6)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateEdge_result(object):
    """
    Attributes:
     - success
     - operationFailed
     - objectNotFound
     - invalidObject
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (Edge, Edge.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'objectNotFound', (ObjectNotFound, ObjectNotFound.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'invalidObject', (InvalidObject, InvalidObject.thrift_spec), None, ),  # 3
    )

    def __init__(self, success=None, operationFailed=None, objectNotFound=None, invalidObject=None,):
        self.success = success
        self.operationFailed = operationFailed
        self.objectNotFound = objectNotFound
        self.invalidObject = invalidObject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Edge()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectNotFound = ObjectNotFound()
                    self.objectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.invalidObject = InvalidObject()
                    self.invalidObject.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateEdge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.objectNotFound is not None:
            oprot.writeFieldBegin('objectNotFound', TType.STRUCT, 2)
            self.objectNotFound.write(oprot)
            oprot.writeFieldEnd()
        if self.invalidObject is not None:
            oprot.writeFieldBegin('invalidObject', TType.STRUCT, 3)
            self.invalidObject.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deletaEdge_args(object):
    """
    Attributes:
     - id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
    )

    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deletaEdge_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deletaEdge_result(object):
    """
    Attributes:
     - operationFailed
     - objectNotFound
     - invalidObject
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'operationFailed', (OperationFailed, OperationFailed.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'objectNotFound', (ObjectNotFound, ObjectNotFound.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'invalidObject', (InvalidObject, InvalidObject.thrift_spec), None, ),  # 3
    )

    def __init__(self, operationFailed=None, objectNotFound=None, invalidObject=None,):
        self.operationFailed = operationFailed
        self.objectNotFound = objectNotFound
        self.invalidObject = invalidObject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationFailed = OperationFailed()
                    self.operationFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectNotFound = ObjectNotFound()
                    self.objectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.invalidObject = InvalidObject()
                    self.invalidObject.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deletaEdge_result')
        if self.operationFailed is not None:
            oprot.writeFieldBegin('operationFailed', TType.STRUCT, 1)
            self.operationFailed.write(oprot)
            oprot.writeFieldEnd()
        if self.objectNotFound is not None:
            oprot.writeFieldBegin('objectNotFound', TType.STRUCT, 2)
            self.objectNotFound.write(oprot)
            oprot.writeFieldEnd()
        if self.invalidObject is not None:
            oprot.writeFieldBegin('invalidObject', TType.STRUCT, 3)
            self.invalidObject.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
